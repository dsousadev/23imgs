{"version":3,"sources":["components/Header.js","components/ImageCard.js","components/AboutModal.js","components/CaptionModal.js","components/WarningModal.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Button","size","circular","icon","onClick","toggleModal","uploadVisible","compiled_default","withIcon","onChange","onDrop","buttonText","singleImage","imgExtension","label","maxFileSize","ImageCard","id","src","url","alt","caption","AboutModal","Modal","dimmer","open","Content","Description","href","Actions","color","CaptionModal","state","charsRemaining","handleInput","e","target","value","length","_this","setState","keyPress","event","keyCode","render","elements_Header_Header","Input","fluid","placeholder","onKeyDown","action","content","React","Component","WarningModal","blurred","App","count","images","captionModalOpen","aboutModalOpen","warningVisible","fetchImages","fetch","then","res","json","number","upload","catch","err","console","log","modalName","currentState","Object","defineProperty","uploadImage","data","FormData","append","method","body","this","map","imageObj","components_ImageCard","key","components_Header","components_CaptionModal","components_AboutModal","components_WarningModal","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c38011a3.chunk.js","sourcesContent":["import React from 'react';\nimport ImageUploader from 'react-images-upload';\nimport { Button } from 'semantic-ui-react';\n\nconst Header = props => {\n  return (\n    <div className=\"Header\">\n      <div className=\"title\">\n        23imgs\n        <Button  \n          className=\"About\"\n          size=\"mini\"\n          circular\n          icon=\"question\"\n          onClick={() => {\n            props.toggleModal('aboutModalOpen');\n          }}\n        />\n      </div>\n      {props.uploadVisible && (\n        <ImageUploader\n          className=\"ImageUploader\"\n          withIcon={true}\n          onChange={props.onDrop}\n          buttonText=\"Upload Image\"\n          singleImage={true}\n          imgExtension={['.jpg', '.png', '.gif', '.jpeg']}\n          label=\"Max File Size: 1mb | Format: jpg / png / gif\"\n          maxFileSize={1500000}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst ImageCard = props => {\n  return (\n    <div className=\"ImageCard\">\n      <img id=\"CardImage\" src={props.url} alt=\"img\" />\n      <div className=\"CaptionArea\">\n        <div className=\"CaptionText\">\n          <p>{props.caption}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageCard;\n","import React from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\n\nconst AboutModal = props => (\n  <Modal dimmer=\"blurring\" open={props.open}>\n    <Modal.Header>About</Modal.Header>\n    <Modal.Content>\n      <Modal.Description>\n        <ul>\n          <li>\n            <h2>23imgs is a simple web application built with React.</h2>\n          </li>\n          <li>Anyone can post an image, only the 23 most recent are posted.</li>\n          <li>\n            You cannot delete an image once you post it, it will be removed when it is the \"24th\"\n            image.\n          </li>\n          <li>\n            Code for both the React front-end and Node back-end can be found on:{' '}\n            <a href=\"http://www.github.com/dsousadev\">Github</a>\n          </li>\n        </ul>\n      </Modal.Description>\n    </Modal.Content>\n    <Modal.Actions>\n      <Button\n        color=\"teal\"\n        icon=\"times\"\n        circular\n        onClick={() => {\n          props.toggleModal('aboutModalOpen');\n        }}\n      />\n    </Modal.Actions>\n  </Modal>\n);\n\nexport default AboutModal;\n","import React from 'react';\nimport { Modal, Input, Header } from 'semantic-ui-react';\n\nclass CaptionModal extends React.Component {\n  state = {\n    caption: '',\n    charsRemaining: 60\n  };\n\n  handleInput = e => {\n    let charsRemaining = 60 - e.target.value.length;\n    this.setState({\n      caption: e.target.value,\n      charsRemaining\n    });\n  };\n\n  keyPress = e => {\n    let event = e;\n    if (!event) {\n      event = { keyCode: 13 };\n    }\n    if (event.keyCode === 13 && this.state.charsRemaining >= 0) {\n      this.props.toggleModal('captionModalOpen', this.state.caption);\n    }\n  };\n\n  render = () => (\n    <Modal dimmer=\"blurring\" open={this.props.open}>\n      <Modal.Header>Caption Your Photo (60 character limit)</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Header>{this.state.charsRemaining} characters remaining</Header>\n          <Input\n            fluid\n            placeholder=\"Caption Here\"\n            value={this.state.caption}\n            onChange={this.handleInput}\n            onKeyDown={this.keyPress}\n            action={{\n              color: 'teal',\n              content: 'Submit',\n              onClick: () => {\n                this.keyPress();\n              }\n            }}\n          />\n        </Modal.Description>\n      </Modal.Content>\n    </Modal>\n  );\n}\n\nexport default CaptionModal;\n","import React from 'react';\nimport { Button, Header, Modal } from 'semantic-ui-react';\n\nconst WarningModal = props => {\n  return (\n    <Modal blurred=\"true\" open={props.open} size=\"small\">\n      <Header icon=\"warning circle\" content=\"Image too small\" />\n      <Modal.Content>\n        <p>Please make sure your image is at least 614 x 614 pixels</p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          color=\"teal\"\n          onClick={() => {\n            props.toggleModal('warningVisible');\n          }}\n        >\n          Okay\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default WarningModal;\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport ImageCard from './components/ImageCard';\nimport AboutModal from './components/AboutModal';\nimport CaptionModal from './components/CaptionModal';\nimport WarningModal from './components/WarningModal';\n\nclass App extends Component {\n  state = {\n    count: 0,\n    images: [],\n    captionModalOpen: false,\n    aboutModalOpen: false,\n    uploadVisible: true,\n    warningVisible: false,\n    // url: 'http://localhost:8080'\n    url: 'https://api-23imgs.7e14.starter-us-west-2.openshiftapps.com'\n  };\n\n  componentDidMount() {\n    this.fetchImages();\n  }\n\n  // fetch 23 images in an array from our API/DB server, set them to state\n  fetchImages = () => {\n    fetch(this.state.url + '/images/')\n      .then(res => {\n        return res.json();\n      })\n      .then(images => {\n        let count = images[images.length - 1].number;\n        let uploadVisible = true;\n        if (this.state.upload) {\n          uploadVisible = false;\n        }\n        this.setState({ images, count, uploadVisible });\n      })\n      .catch(err => console.log(err));\n  };\n\n  // turns on/off the about modal or caption modal, also triggers the imageUpload when\n  // closing the caption modal\n  toggleModal = (modalName, caption) => {\n    this.setState(\n      currentState => ({ [modalName]: !currentState[modalName] }),\n      () => {\n        if (modalName === 'captionModalOpen' && !this.state.captionModalOpen) {\n          this.uploadImage(caption);\n        }\n      }\n    );\n  };\n\n  // sends the user's image to the API with the desired caption\n  // and a number so that each image has a unique name\n  uploadImage = caption => {\n    let data = new FormData();\n    data.append('file', this.state.upload);\n    data.append('caption', caption);\n    data.append('number', this.state.count + 1);\n    fetch(this.state.url + '/upload/', {\n      method: 'POST',\n      body: data\n    })\n      .then(res => {\n        this.fetchImages();\n      })\n      .catch(err => console.log(err));\n  };\n\n  // triggered when an image is selected to upload\n  // checks if the image size is large enough\n  // opens the caption modal and saves the image to state\n  onDrop = upload => {\n    upload = upload[upload.length - 1];\n    if (!upload) {\n      return;\n    }\n    if (upload.size > 25000) {\n      this.setState({ upload }, () => {\n        this.toggleModal('captionModalOpen');\n      });\n    } else if (upload.size < 25000) {\n      this.toggleModal('warningVisible');\n    }\n  };\n\n  render() {\n    let images = this.state.images.map(imageObj => {\n      return <ImageCard url={imageObj.url} caption={imageObj.caption} key={imageObj.number} />;\n    });\n\n    return (\n      <div className=\"App\">\n        <Header\n          onDrop={this.onDrop}\n          toggleModal={this.toggleModal}\n          uploadVisible={this.state.uploadVisible}\n        />\n        <CaptionModal open={this.state.captionModalOpen} toggleModal={this.toggleModal} />\n        <AboutModal open={this.state.aboutModalOpen} toggleModal={this.toggleModal} />\n        <WarningModal open={this.state.warningVisible} toggleModal={this.toggleModal} />\n        {images}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}